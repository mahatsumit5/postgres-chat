# # FriendRequests model

type Mutation {
  "Send friend request to other user"
  sendRequest(toID: String!): SentRequestResponse
  "Delete Friend Request"
  deleteFriendRequest(params: DeleteRequestParams): SentRequestResponse
  "Accept incoming request"
  acceptFriendRequest(body: DeleteRequestParams): Response
}

type Query {
  "Get all incoming request"
  getFriendRequest: FriendRequestResponse
  "Get list of ALL SENT request"
  getSentFriendRequest(queryParams: queryParamsSentReq): FriendRequestResponse
}

type FriendRequests {
  from: User!
  fromId: String!
  to: User!
  toId: String!
  status: Status!
}

type FriendRequest {
  from: Friend!
  to: Friend!
  status: Status!
  toId: String!
}

enum Status {
  ACCEPTED
  PENDING
  REJECTED
}

input queryParamsSentReq {
  page: Int!
  take: Int!
  search: String!
}

input DeleteRequestParams {
  fromId: String!
  toId: String!
}
